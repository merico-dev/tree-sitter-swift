======
Empty protocol declaration
======

protocol A {}

---

(program
  (protocol_declaration
    protocol_name: (identifier)
    body: (protocol_body)))

======
Public protocol declaration
======

public protocol A {
	var a: Int { get }
	func f()
	init()
	init?()
	init!()
	subscript(_: ()) -> Int { get }
}

---

(program
  (protocol_declaration
    protocol_name: (identifier)
    body: (protocol_body
      (protocol_property_declaration
        (variable_declaration_head)
        identifier: (identifier)
        (type_annotation
          (type_identifier
            identifier: (identifier)))
        (getter_setter_keyword_block
          (getter_keyword_clause)))
      (protocol_method_declaration
        (function_head)
        name: (function_name
          (identifier)))
      (protocol_initializer_declaration
        keyword: (init))
      (protocol_initializer_declaration
        keyword: (init))
      (protocol_initializer_declaration
        keyword: (init))
      (protocol_subscript_declaration
        (subscript_head
          parameters: (parameter
            identifier: (identifier)
            (type_annotation
              (tuple_type))))
        (subscript_result
          (type_identifier
            identifier: (identifier)))
        (getter_setter_keyword_block
          (getter_keyword_clause))))))


======
Protocols with a typealias
======

protocol Sequence {
	typealias B = C
}

---

(program
  (protocol_declaration
    protocol_name: (identifier)
    body: (protocol_body
      (typealias_declaration
        (identifier)
        (typealias_assignment
          (type_identifier
            identifier: (identifier)))))))


======
Protocols with an associatedtype
======

protocol Sequence {
  associatedtype Foo
  associatedtype Bar: BizProtocol
}

---

(program
  (protocol_declaration
    protocol_name: (identifier)
    body: (protocol_body
      (protocol_associated_type_declaration
        (identifier))
      (protocol_associated_type_declaration
        (identifier)
        (type_inheritance_clause
          (type_identifier
            identifier: (identifier)))))))
