======
String Literals
======

"Foo Bar Biz Buzz"

---

(program
  (expression
    postfix_expression: (string_literal)))

======
Integer Literals
======

42
4_2
0600
0_600
170141183460469231731687303715884105727
170_141183_460469_231731_687303_715884_105727
-0.333
-5_0_0
+6
+6_0
6
6_0

---

(program
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number)))

======
Floating-point Literals
======

0.
72.40
072.40
2.71828
.25
1_5.
+.25
-1_5.
0x1ABCDEFabcdef;
0o7632157312;
0b1010101001;
1e+3;


---

(program
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number))
  (expression
    postfix_expression: (number)))

======
Boolean Literals
======

true
var foo = false

---

(program
  (expression
    postfix_expression: (boolean_literal))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (boolean_literal)))))))


======
Nil Literal
======

nil
let foo = nil

---

(program
  (expression
    postfix_expression: (nil_literal))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (nil_literal))))))
