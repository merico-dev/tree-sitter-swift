======
Array type
======

let foo: [String]
var bar: Array<Int>
let biz: [FooType]

---

(program
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (array_type
          (type_identifier
            identifier: (identifier))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (type_identifier
          identifier: (identifier)
          (generic_argument_clause
            (generic_argument
              (type_identifier
                identifier: (identifier))))))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (array_type
          (type_identifier
            identifier: (identifier)))))))

======
Array type with initialization
======

let ints: [Int] = [
  0, 1, 2, 3, 4, 5
]
var mixed = [
  0, Foo, 2, "Three", 4, "Five"
]
var foo: [AnyHashable] = [ ]

---

(program
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (array_type
          (type_identifier
            identifier: (identifier))))
      value: (initializer
        (expression
          postfix_expression: (array_literal
            elements: (expression
              postfix_expression: (number))
            elements: (expression
              postfix_expression: (number))
            elements: (expression
              postfix_expression: (number))
            elements: (expression
              postfix_expression: (number))
            elements: (expression
              postfix_expression: (number))
            elements: (expression
              postfix_expression: (number)))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (array_literal
              elements: (expression
                postfix_expression: (number))
              elements: (expression
                postfix_expression: (identifier))
              elements: (expression
                postfix_expression: (number))
              elements: (expression
                postfix_expression: (string_literal))
              elements: (expression
                postfix_expression: (number))
              elements: (expression
                postfix_expression: (string_literal))))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (array_type
          (type_identifier
            identifier: (identifier))))
      value: (initializer
        (expression
          postfix_expression: (array_literal))))))

======
Dictionary type
======

let foo: Dictionary<String, String>
var foo: [Int: AnyHashable]
let foo: [AnyHashable: Any]

---

(program
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (type_identifier
          identifier: (identifier)
          (generic_argument_clause
            (generic_argument
              (type_identifier
                identifier: (identifier)))
            (generic_argument
              (type_identifier
                identifier: (identifier))))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (dictionary_type
          (type_identifier
            identifier: (identifier))
          (type_identifier
            identifier: (identifier))))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (dictionary_type
          (type_identifier
            identifier: (identifier))
          (any_type))))))

======
Dictionary type with initialization
======

var strings: Dictionary<String, String> = [ "Foo" : "Bar" ]
let numbers = [
    0: "Zero",
    1: "One",
    2: "Two"
]
var foo: [AnyHashable: Any] = [ : ]

---

(program
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (type_identifier
          identifier: (identifier)
          (generic_argument_clause
            (generic_argument
              (type_identifier
                identifier: (identifier)))
            (generic_argument
              (type_identifier
                identifier: (identifier))))))
      value: (initializer
        (expression
          postfix_expression: (dictionary_literal
            elements: (dictionary_literal_item
              key: (expression
                postfix_expression: (string_literal))
              value: (expression
                postfix_expression: (string_literal))))))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (dictionary_literal
            elements: (dictionary_literal_item
              key: (expression
                postfix_expression: (number))
              value: (expression
                postfix_expression: (string_literal)))
            elements: (dictionary_literal_item
              key: (expression
                postfix_expression: (number))
              value: (expression
                postfix_expression: (string_literal)))
            elements: (dictionary_literal_item
              key: (expression
                postfix_expression: (number))
              value: (expression
                postfix_expression: (string_literal))))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (dictionary_type
          (type_identifier
            identifier: (identifier))
          (any_type)))
      value: (initializer
        (expression
          postfix_expression: (dictionary_literal))))))

======
Tuple declaration
======

var foo: (Int, Int)
let foo: (top: Int, bottom: Int)
func foo() -> (min: Int, max: Int)? {}
func foo() -> (String, String) {}

---

(program
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (tuple_type
          (tuple_type_element
            (type_identifier
              identifier: (identifier)))
          (tuple_type_element
            (type_identifier
              identifier: (identifier)))))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (tuple_type
          (tuple_type_element
            (identifier)
            (type_annotation
              (type_identifier
                identifier: (identifier))))
          (tuple_type_element
            (identifier)
            (type_annotation
              (type_identifier
                identifier: (identifier))))))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (optional_type
        (tuple_type
          (tuple_type_element
            (identifier)
            (type_annotation
              (type_identifier
                identifier: (identifier))))
          (tuple_type_element
            (identifier)
            (type_annotation
              (type_identifier
                identifier: (identifier))))))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (tuple_type
        (tuple_type_element
          (type_identifier
            identifier: (identifier)))
        (tuple_type_element
          (type_identifier
            identifier: (identifier)))))))

======
Empty tuple declaration
======

let foo: ()
func foo() -> ((), Int) {}

---

(program
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (tuple_type))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (tuple_type
        (tuple_type_element
          (tuple_type))
        (tuple_type_element
          (type_identifier
            identifier: (identifier)))))))

======
Tuple usage
======

var foo = (10, 12)
let foo = (top: 10, bottom: 12)
return ("Foo", "Bar")
return (first: "Foo", last: "Bar")

---

(program
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (tuple_expression
              elements: (tuple_element
                expression: (expression
                  postfix_expression: (number)))
              elements: (tuple_element
                expression: (expression
                  postfix_expression: (number)))))))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (tuple_expression
            elements: (tuple_element
              (identifier)
              expression: (expression
                postfix_expression: (number)))
            elements: (tuple_element
              (identifier)
              expression: (expression
                postfix_expression: (number))))))))
  (return_statement
    (expression
      postfix_expression: (tuple_expression
        elements: (tuple_element
          expression: (expression
            postfix_expression: (string_literal)))
        elements: (tuple_element
          expression: (expression
            postfix_expression: (string_literal))))))
  (return_statement
    (expression
      postfix_expression: (tuple_expression
        elements: (tuple_element
          (identifier)
          expression: (expression
            postfix_expression: (string_literal)))
        elements: (tuple_element
          (identifier)
          expression: (expression
            postfix_expression: (string_literal)))))))
