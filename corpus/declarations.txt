======
import
======

import Foo
import Foo.Bar
import typealias Foo.Bar.Quux
import foo.bar

---

(program
  (import_declaration
    identifier: (identifier))
  (import_declaration
    identifier: (identifier)
    identifier: (identifier))
  (import_declaration
    identifier: (identifier)
    identifier: (identifier)
    identifier: (identifier))
  (import_declaration
    identifier: (identifier)
    identifier: (identifier)))

======
constant
======

private let foo
public let foo = bar
let foo, bar = foo
let foo, bar = foo, quux: Int = baz
public static let foo = bar

---

(program
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier)))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier)))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier)))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier)))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier))))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (type_identifier
          identifier: (identifier)))
      value: (initializer
        (expression
          postfix_expression: (identifier)))))
  (constant_declaration
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier))))))

======
variable
======

internal var foo
var foo = bar
var foo: Int { get }
var foo: Int { get set }
var foo: Int { set get }
var foo, bar = foo
public var foo, bar = foo, quux: Int = baz
public private(set) var foo = bar
public static var foo = bar

---

(program
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (identifier))))))
  (variable_declaration
    (variable_declaration_head)
    (identifier)
    (type_annotation
      (type_identifier
        identifier: (identifier)))
    (getter_setter_keyword_block
      (getter_keyword_clause)))
  (variable_declaration
    (variable_declaration_head)
    (identifier)
    (type_annotation
      (type_identifier
        identifier: (identifier)))
    (getter_setter_keyword_block
      (getter_keyword_clause)
      (setter_keyword_clause)))
  (variable_declaration
    (variable_declaration_head)
    (identifier)
    (type_annotation
      (type_identifier
        identifier: (identifier)))
    (getter_setter_keyword_block
      (setter_keyword_clause)
      (getter_keyword_clause)))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier)))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier)))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier)))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      value: (initializer
        (expression
          postfix_expression: (identifier))))
    pattern_initializer: (pattern_initializer
      (identifier_pattern
        (identifier))
      (type_annotation
        (type_identifier
          identifier: (identifier)))
      value: (initializer
        (expression
          postfix_expression: (identifier)))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (identifier))))))
  (variable_declaration
    (variable_declaration_head)
    pattern_initializer: (pattern_initializer
      (expression
        binary_expression: (binary_expression
          left: (expression
            postfix_expression: (identifier))
          right: (expression
            postfix_expression: (identifier)))))))

======
typealias
======

typealias Foo = Int
public typealias Bar = String

---

(program
  (typealias_declaration
    (identifier)
    (typealias_assignment
      (type_identifier
        identifier: (identifier))))
  (typealias_declaration
    (identifier)
    (typealias_assignment
      (type_identifier
        identifier: (identifier)))))

======
functions
======

public func foo() {}
func > (lhs: Int, rhs: Int) -> Bool {}
func foo() -> Int {}
func foo(_: Int) {}
func foo(x: Int) {}
func foo(_ x: Int) {}
func foo(x x: Int) {}
func foo(x: Int, y: Int) {}

---

(program
  (function_declaration
    (function_head)
    name: (function_name
      (identifier)))
  (function_declaration
    (function_head)
    name: (function_name
      (operator))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))
    (function_result
      (type_identifier
        identifier: (identifier))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (type_identifier
        identifier: (identifier))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      (external_parameter_name)
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      (external_parameter_name)
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))))

======
functions - throwing
======

public func foo() throws -> Int {}

---

(program
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (type_identifier
        identifier: (identifier)))))

======
functions - optionals
======

public func foo() -> Int? {}
public func foo(p1: String?, p2: Int) -> Void {}
public func foo(p1: String!) -> Int! {}

---

(program
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (function_result
      (optional_type
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (optional_type
          (type_identifier
            identifier: (identifier)))))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))
    (function_result
      (type_identifier
        identifier: (identifier))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (implicitly_unwrapped_optional_type
          (type_identifier
            identifier: (identifier)))))
    (function_result
      (implicitly_unwrapped_optional_type
        (type_identifier
          identifier: (identifier))))))

======
functions - generic functions
======

public func foo<T>() -> T? {}
public func foo<T: Comparable>() -> T? {}
public func foo<Foo, Bar>(p1: Foo) -> Bar {}

---

(program
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (generic_parameter_clause
      (generic_parameter
        (identifier)))
    (function_result
      (optional_type
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (generic_parameter_clause
      (generic_parameter
        (identifier)
        (type_identifier
          identifier: (identifier))))
    (function_result
      (optional_type
        (type_identifier
          identifier: (identifier)))))
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))
    (generic_parameter_clause
      (generic_parameter
        (identifier))
      (generic_parameter
        (identifier)))
    parameters: (parameter
      identifier: (identifier)
      (type_annotation
        (type_identifier
          identifier: (identifier))))
    (function_result
      (type_identifier
        identifier: (identifier)))))


======
functions - static
======

public static func foo() {}

---

(program
  (function_declaration
    (function_head)
    name: (function_name
      (identifier))))

======
enum
======

public enum A {}
internal enum A {
	case A
}
private enum A {
	case A(Int)
}

---

(program
  (enum_declaration
    (union_style_enum
      (enum_name)))
  (enum_declaration
    (union_style_enum
      (enum_name)
      (union_style_enum_member
        (union_style_enum_case_clause
          (union_style_enum_case
            (enum_case_name))))))
  (enum_declaration
    (union_style_enum
      (enum_name)
      (union_style_enum_member
        (union_style_enum_case_clause
          (union_style_enum_case
            (enum_case_name)
            (tuple_type
              (tuple_type_element
                (type_identifier
                  identifier: (identifier))))))))))

======
initializer
======

struct S {
	init() {}
}

---

(program
  (struct_declaration
    struct_name: (identifier)
    body: (struct_body
      (initializer_declaration
        keyword: (init)))))

======
extension
======

private extension A {
	func f() {}
}

---

(program
  (extension_declaration
    name: (type_identifier
      identifier: (identifier))
    body: (extension_body
      (function_declaration
        (function_head)
        name: (function_name
          (identifier))))))

======
subscript
======

struct A {
	subscript(_: B) -> C {}
}

---

(program
  (struct_declaration
    struct_name: (identifier)
    body: (struct_body
      (subscript_declaration
        (subscript_head
          parameters: (parameter
            identifier: (identifier)
            (type_annotation
              (type_identifier
                identifier: (identifier)))))
        (subscript_result
          (type_identifier
            identifier: (identifier)))))))

======
operator
======

precedencegroup AssignmentTrue {
    assignment: true
}

precedencegroup AssignmentFalse {
    assignment: false
}

infix operator ++=: AssignmentTrue
infix operator ++: AssignmentFalse

---

(program
  (precedence_group_declaration
    (precedence_group_name)
    (precedence_group_attribute
      (precedence_group_assignment
        (boolean_literal))))
  (precedence_group_declaration
    (precedence_group_name)
    (precedence_group_attribute
      (precedence_group_assignment
        (boolean_literal))))
  (infix_operator_declaration
    (operator)
    (infix_operator_group
      (precedence_group_name)))
  (infix_operator_declaration
    (operator)
    (infix_operator_group
      (precedence_group_name))))
